# -*- coding: utf-8 -*-
"""MNIST Classification Project [99.23%].ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1v4ojJyGtoqEPjL2HR1gBoJtAo_SXXJhh
"""

import numpy as np
import tensorflow
from tensorflow import keras
import matplotlib.pyplot as plt
from keras.datasets import mnist

(X_train, y_train), (x_test, y_test) = mnist.load_data()

unique, counts = np.unique(y_train, return_counts = True)
print("Train Labels", dict(zip(unique, counts)))

unique, counts = np.unique(y_test, return_counts = True)
print("Test Labels", dict(zip(unique, counts)))

indexes = np.random.randint(0, X_train.shape[0], size = 25)
images = X_train[indexes]
labels = y_train[indexes]

plt.figure(figsize = (5, 5))
for i in range(len(indexes)):
  plt.subplot(5, 5, i+1)
  image = images[i]
  plt.imshow(image)
  plt.axis("off")

plt.show()
plt.close('all')

num_labels = len(np.unique(y_train))
print(num_labels)

y_train = keras.utils.to_categorical(y_train)
y_test = keras.utils.to_categorical(y_test)

input_size = X_train.shape[1] * X_train.shape[2]
x_train = np.reshape(X_train, [-1, input_size])
x_train = x_train.astype("float32") / 255
x_test = np.reshape(x_test, [-1, input_size])
x_test = x_test.astype("float32") /255

x_train.shape, x_test.shape

"""### MLP Model"""

from keras import layers
from keras.models import Sequential
batch_size = 128
hidden_units = 256
dropout = 0.45

model = Sequential()
model.add(layers.Input(shape = (input_size)))
model.add(layers.Dense(hidden_units, activation = "relu"))
model.add(layers.Dropout(dropout))
model.add(layers.Dense(hidden_units, activation = "relu"))
model.add(layers.Dropout(dropout))
model.add(layers.Dense(num_labels, activation = "softmax"))
model.summary()
keras.utils.plot_model(model, show_shapes=True)

model.compile(loss = "categorical_crossentropy", optimizer = "adam", metrics = ["accuracy"])
model.fit(x_train, y_train, batch_size = batch_size, epochs = 20, validation_split = 0.1)
_, acc = model.evaluate(x_test, y_test, batch_size = batch_size, verbose = 1)

print(f"Test accuracy: {acc * 100:.2f}%")

"""### CNN Model"""

(x_train, y_train), (x_test, y_test) = mnist.load_data()
num_labels = len(np.unique(y_train))
y_train = keras.utils.to_categorical(y_train)
y_test = keras.utils.to_categorical(y_test)
image_size = x_train.shape[1]
x_train = np.reshape(x_train, [-1, image_size, image_size, 1])
x_train = x_train.astype('float32') / 255
x_test = np.reshape(x_test, [-1, image_size, image_size, 1])
x_test = x_test.astype('float32') / 255

shape = (image_size, image_size, 1)

model = Sequential(name = "CNN")
model.add(layers.Input(shape = (shape)))
model.add(layers.Conv2D(filters = 64, kernel_size = 3, activation = "relu"))
model.add(layers.MaxPooling2D(2))
model.add(layers.Conv2D(filters = 64, kernel_size = 3, activation = "relu"))
model.add(layers.MaxPooling2D(2))
model.add(layers.Conv2D(filters = 64, kernel_size = 3, activation = "relu"))
model.add(layers.Flatten())
model.add(layers.Dropout(0.2))
model.add(layers.Dense(num_labels, activation = "softmax"))
model.summary()
keras.utils.plot_model(model, show_shapes = True)

model.compile(loss = 'categorical_crossentropy', optimizer = "adam", metrics = ["accuracy"])
model.fit(x_train, y_train, epochs = 10, batch_size = batch_size, validation_split = 0.1)
_, acc = model.evaluate(x_test, y_test, batch_size = batch_size, verbose = 1)
print(f"\nTest Accuracy {acc * 100:.2f}%")